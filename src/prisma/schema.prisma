generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  ADMIN
  OWNER
  EMPLOYEE
}

enum Subscription {
  BASIC
  PRO
  PREMIUM
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
}

enum BookingMethod {
  ONLINE
  IN_STORE
}

enum WeekDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model Shop {
  id        Int      @id @default(autoincrement())
  name      String
  address   String
  password  String
  createdAt DateTime @default(now())

  ownerId Int
  owner   User @relation("OwnerShops", fields: [ownerId], references: [id], onDelete: Restrict, onUpdate: Restrict)

  employees    User[] @relation("ShopEmployees")
  services     Service[]
  bookings     Booking[]
  inventory    InventoryItem[]
  workingSlots WorkingSlot[]
}

model User {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  hashedPassword String
  name           String
  role           Role     @default(EMPLOYEE)
  subscription   Subscription @default(BASIC)
  createdAt      DateTime @default(now())
  isActive       Boolean  @default(true)

  shopId Int?
  shop   Shop? @relation("ShopEmployees", fields: [shopId], references: [id], onDelete: Cascade)

  shops Shop[] @relation("OwnerShops")

  services          EmployeeService[]
  servicesCreated   Service[] @relation("UserCreatedServices")
  bookings          Booking[]
  workingSlots      WorkingSlot[]
  workingHourRanges WorkingHourRange[]
}

model Customer {
  id        Int       @id @default(autoincrement())
  name      String
  phone     String
  email     String?
  bookings  Booking[]
  createdAt DateTime  @default(now())
}

model Service {
  id       Int    @id @default(autoincrement())
  name     String
  duration Int
  price    Float

  createdById Int
  createdBy   User @relation("UserCreatedServices", fields: [createdById], references: [id], onDelete: Cascade)

  shopId Int
  shop   Shop @relation(fields: [shopId], references: [id])

  employees EmployeeService[]
  bookings  Booking[]
}

model EmployeeService {
  employeeId Int
  serviceId  Int
  employee   User    @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  service    Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@id([employeeId, serviceId])
}

model Booking {
  id   Int      @id @default(autoincrement())
  date DateTime

  customerId Int
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  serviceId Int
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  employeeId Int
  employee   User @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  shopId Int
  shop   Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)

  status    BookingStatus  @default(PENDING)
  notes     String?
  createdAt DateTime       @default(now())
  method    BookingMethod?
}

model WorkingSlot {
  id          Int      @id @default(autoincrement())
  employeeId  Int
  employee    User     @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  date        DateTime
  startTime   String
  endTime     String
  onlyInStore Boolean  @default(false)
  createdAt   DateTime @default(now())  

  shopId Int
  shop   Shop @relation(fields: [shopId], references: [id])
}

model WorkingHourRange {
  id         Int      @id @default(autoincrement())
  employeeId Int
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime @default(now())

  employee User @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  slots    RecurringSlot[]
}

model RecurringSlot {
  id          Int     @id @default(autoincrement())
  rangeId     Int
  weekDay     WeekDay
  startTime   String
  endTime     String
  onlyInStore Boolean @default(false)

  range WorkingHourRange @relation(fields: [rangeId], references: [id], onDelete: Cascade)
}

model InventoryItem {
  id        Int      @id @default(autoincrement())
  name      String
  quantity  Int
  shopId    Int
  shop      Shop     @relation(fields: [shopId], references: [id])
  createdAt DateTime @default(now())
}
